{
  "manifest": {
    "name": "react-jinke-music-player",
    "version": "4.24.2",
    "description": "Maybe the best beautiful HTML5 responsive player component for react",
    "main": "lib/index.js",
    "module": "es/index.js",
    "unpkg": "dist/react-jinke-music-player.min.js",
    "typings": "index.d.ts",
    "files": ["*"],
    "scripts": {
      "start": "yarn demo",
      "build:clean": "rimraf lib es dist assets",
      "lint": "yarn lint:js && yarn lint:style",
      "lint:fix": "yarn lint-fix:js && yarn lint-fix:style",
      "lint:js": "./node_modules/.bin/eslint ./src ./__tests__",
      "lint:style": "stylelint '{example,src}/**/*.less' --syntax less",
      "lint-fix:js": "yarn lint:js --fix",
      "lint-fix:style": "yarn lint:style --fix",
      "build:css": "webpack --mode=production --config webpack.css.config.js --progress",
      "build:js": "yarn build:cjs && yarn build:es && yarn build:umd",
      "build:cjs": "cross-env OUTPUT_MODULE=commonjs babel src -d lib",
      "build:es": "babel src -d es",
      "build:umd": "webpack --mode=production --config webpack.umd.config.js --progress",
      "build": "cross-env NODE_ENV=production yarn build:clean && yarn build:js && yarn build:css && yarn copy:less && yarn copy:module-css",
      "build:analyzer": "cross-env ANALYZER=1 yarn build",
      "build:demo": "cross-env NODE_ENV=production webpack --mode=production --progress --config  ./example/webpack.config.js",
      "build:demo-analyzer": "cross-env ANALYZER=1 yarn build:demo",
      "build:netlify": "cross-env NETLIFY=1 yarn build:demo ",
      "build:surge": "cross-env SURGE=1 yarn build:demo ",
      "copy:module-css": "cp ./assets/index.css ./assets/index.module.css",
      "copy:less": "cp -r src/styles lib/styles && cp -r src/styles es/styles",
      "demo": "cross-env NODE_ENV=development webpack serve --mode=development --progress --config  ./example/webpack.config.js",
      "test": "jest __tests__/tests",
      "test:coverage": "yarn test --coverage",
      "ci:coverage": "yarn test:coverage && codecov",
      "prepublishOnly": "yarn build",
      "prettier": "prettier -c --write '**/*'",
      "pretty:quick": "pretty-quick",
      "lint-staged": "lint-staged",
      "release": "semantic-release",
      "bundlesize": "bundlesize",
      "prepare": "yarn build"
    },
    "config": {
      "commitizen": {
        "path": "cz-emoji"
      }
    },
    "sideEffects": ["assets/*", "dist/*", "*.less"],
    "lint-staged": {
      "*.{css,less,json}": ["prettier --write"],
      "*.{js,jsx}": ["eslint --fix", "prettier --write"]
    },
    "author": {
      "name": "Jinke.Li",
      "email": "1359518268@qq.com"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/lijinke666/react-music-player"
    },
    "homepage": "https://lijinke666.github.io/react-music-player",
    "bugs": {
      "url": "https://github.com/lijinke666/react-music-player/issues"
    },
    "license": "MIT",
    "keywords": [
      "react",
      "reactjs",
      "player",
      "music",
      "audio",
      "react-player",
      "react-jinke-music-player",
      "react-music-player",
      "react-audio-player",
      "cd-player",
      "music-player",
      "audio-player",
      "component"
    ],
    "dependencies": {
      "@emotion/css": "^11.10.5",
      "@react-icons/all-files": "^4.1.0",
      "classnames": "^2.3.1",
      "downloadjs": "^1.4.7",
      "is-mobile": "^2.2.2",
      "prop-types": "^15.7.2",
      "rc-slider": "^9.7.2",
      "rc-switch": "^3.2.2",
      "react-draggable": "^4.4.3",
      "react-virtualized": "^9.22.3",
      "react-window": "^1.8.8",
      "sortablejs": "^1.13.0"
    },
    "bundlesize": [
      {
        "path": "./dist/react-jinke-music-player.min.js",
        "maxSize": "100 kB"
      }
    ],
    "devDependencies": {
      "@babel/cli": "7.13.16",
      "@babel/core": "7.14.0",
      "@babel/plugin-proposal-class-properties": "7.13.0",
      "@babel/plugin-proposal-object-rest-spread": "7.13.8",
      "@babel/plugin-syntax-dynamic-import": "7.8.3",
      "@babel/plugin-syntax-object-rest-spread": "7.8.3",
      "@babel/plugin-transform-object-assign": "7.12.13",
      "@babel/plugin-transform-runtime": "^7.13.15",
      "@babel/preset-env": "7.14.1",
      "@babel/preset-react": "^7.13.13",
      "@babel/runtime": "7.14.0",
      "@commitlint/config-conventional": "^12.1.1",
      "@semantic-release/changelog": "^5.0.1",
      "@semantic-release/git": "^9.0.0",
      "@types/jest": "^26.0.23",
      "@types/sortablejs": "^1.10.6",
      "autoprefixer": "^10.2.5",
      "babel-core": "^7.0.0-bridge.0",
      "babel-eslint": "^10.1.0",
      "babel-jest": "^26.6.3",
      "babel-loader": "^8.2.2",
      "babel-plugin-import": "^1.13.3",
      "babel-plugin-transform-runtime": "^6.23.0",
      "bundlesize": "^0.18.1",
      "clean-webpack-plugin": "^3.0.0",
      "codecov": "^3.8.2",
      "commitizen": "^4.2.4",
      "commitlint": "^12.1.1",
      "copy-webpack-plugin": "latest",
      "coveralls": "^3.1.0",
      "cross-env": "^7.0.3",
      "css-loader": "^5.2.4",
      "css-minimizer-webpack-plugin": "^2.0.0",
      "enzyme": "^3.11.0",
      "enzyme-adapter-react-16": "^1.15.6",
      "enzyme-to-json": "^3.6.2",
      "esbuild-webpack-plugin": "^1.1.0",
      "eslint": "^7.26.0",
      "eslint-config-airbnb": "^18.2.1",
      "eslint-config-prettier": "^8.3.0",
      "eslint-plugin-babel": "^5.3.1",
      "eslint-plugin-import": "^2.22.1",
      "eslint-plugin-jest": "^24.3.6",
      "eslint-plugin-jsx-a11y": "^6.4.1",
      "eslint-plugin-prettier": "^3.4.0",
      "eslint-plugin-react": "^7.23.2",
      "file-loader": "^6.2.0",
      "html-loader": "^2.1.2",
      "html-webpack-plugin": "^5.3.1",
      "husky": "^6.0.0",
      "jest": "^26.6.3",
      "jest-environment-jsdom": "^26.6.2",
      "jsdom": "^16.5.3",
      "less": "^4.1.1",
      "less-loader": "^8.1.1",
      "lint-staged": "^11.0.0",
      "mini-css-extract-plugin": "^1.6.0",
      "postcss": "^8.2.14",
      "postcss-loader": "^5.2.0",
      "power-assert": "^1.6.1",
      "pre-commit": "^1.2.2",
      "prettier": "^2.2.1",
      "pretty-quick": "^3.1.0",
      "react": "16.13.1",
      "react-dom": "16.13.1",
      "react-hot-loader": "^4.13.0",
      "react-loader": "^2.4.7",
      "rimraf": "^3.0.2",
      "semantic-release": "^17.4.2",
      "style-loader": "~2.0.0",
      "stylelint": "^13.13.1",
      "stylelint-config-prettier": "^8.0.2",
      "stylelint-config-standard": "^22.0.0",
      "uglifyjs-webpack-plugin": "^2.2.0",
      "webpack": "^5.36.2",
      "webpack-bundle-analyzer": "^4.4.1",
      "webpack-cli": "^4.7.0",
      "webpack-dev-server": "3.11.2"
    },
    "peerDependencies": {
      "react": ">=16.9.0",
      "react-dom": ">=16.9.0"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\devilG\\AppData\\Local\\Yarn\\Cache\\v6\\npm-react-jinke-music-player-4.24.2-4f902c81-8710-4346-b1b4-feef4d21017d-1673926255649\\node_modules\\react-jinke-music-player\\package.json",
    "readmeFilename": "README.md",
    "readme": "<p align=\"center\">\n  <img alt=\"logo\" src=\"https://github.com/lijinke666/react-music-player/blob/master/assetsImg/logo.png?raw=true\" width=\"100\" max-width=\"100%\">\n</p>\n\n<h1 align=\"center\">\nreact-jinke-music-player\n</h1>\n\n<h4 align=\"center\">\n:musical_note: Maybe the best beautiful HTML5 responsive player component for react : )\n</h4>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/react-jinke-music-player\" title=\"npm\">\n    <img src=\"https://img.shields.io/npm/dm/react-jinke-music-player.svg?style=flat-square\" alt=\"npm\"/>\n  </a>\n  <a href=\"https://www.npmjs.com/package/react-jinke-music-player\" title=\"npm\">\n    <img src=\"https://img.shields.io/npm/l/react-jinke-music-player.svg?style=flat-square\" alt=\"npm\"/>\n  </a>\n  <a href=\"https://github.com/lijinke666/react-music-player/actions\">\n    <img src=\"https://github.com/lijinke666/react-music-player/workflows/CI/badge.svg\" />\n  </a>\n   <a href=\"https://badge.fury.io/js/react-jinke-music-player\" title=\"npm\">\n    <img src=\"https://img.shields.io/npm/v/react-jinke-music-player.svg?style=flat-square\" alt=\"npm version\"/>\n  </a>\n  <a href=\"https://lgtm.com/projects/g/lijinke666/react-music-player/context:javascript\">\n    <img alt=\"Language grade: JavaScript\" src=\"https://img.shields.io/lgtm/grade/javascript/g/lijinke666/react-music-player.svg?logo=lgtm&logoWidth=18\"/>\n  </a>\n  <a href=\"https://codecov.io/gh/lijinke666/react-music-player\">\n    <img src=\"https://codecov.io/gh/lijinke666/react-music-player/branch/master/graph/badge.svg\" />\n  </a>\n  <img alt=\"npm bundle size\" src=\"https://img.shields.io/bundlephobia/minzip/react-jinke-music-player?style=flat-square\">\n  <a href=\"https://david-dm.org/lijinke666/react-music-player\" title=\"dependencies status\"><img src=\"https://david-dm.org/lijinke666/react-music-player/status.svg\"/></a>\n  <a href=\"https://david-dm.org/lijinke666/react-music-player?type=dev\" title=\"devDependencies status\"><img src=\"https://david-dm.org/lijinke666/react-music-player/dev-status.svg\"/></a>\n  <a href=\"https://github.com/semantic-release/semantic-release\" title=\"semantic-release\">\n    <img src=\"https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg\" alt=\"semantic release\"/>\n  </a>\n  <a href=\"https://visitor-badge.glitch.me\" title=\"visitor\">\n    <img src=\"https://visitor-badge.glitch.me/badge?page_id=lijinke666.react-music-player\" alt=\"visitor\"/>\n  </a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/lijinke666/react-music-player/blob/master/CN.md\">\n    中文文档\n  </a>\n</p>\n\n## :package: Installation\n\nusing `yarn` :\n\n```bash\nyarn add react-jinke-music-player\n```\n\nusing `npm` :\n\n```bash\nnpm install react-jinke-music-player --save\n```\n\n## :framed_picture: Screenshots\n\n> mini mode <br/>\n\n![mini mode](https://github.com/lijinke666/react-music-player/blob/master/assetsImg/mini.png?raw=true)\n\n> Light Theme <br/>\n\n![light theme](https://github.com/lijinke666/react-music-player/blob/master/assetsImg/light-theme.png?raw=true)\n\n> Dark Theme <br/>\n\n![dark theme](https://github.com/lijinke666/react-music-player/blob/master/assetsImg/dark-theme.png?raw=true)\n\n> mobile <br/>\n\n![mobile](https://github.com/lijinke666/react-music-player/blob/master/assetsImg/mobile.jpg?raw=true)\n\n## :sparkles: Feature list\n\n- [x] Beautiful ui and animation\n- [x] Responsive\n- [x] Support theme switch\n- [x] Support typescript (d.ts)\n- [x] Support lyric\n- [x] Support audio list sortable\n- [x] Play list\n- [x] Full player features\n- [x] [Server-Side Rendering](#bulb-server-side-rendering)\n- [x] [Import in Browser](#bulb-import-in-browser)\n- [x] [Complete hook function](#clipboard-api)\n- [x] [Custom operation ui](#bulb-custom-operation-ui)\n- [x] [Custom downloader](#bulb-custom-downloader)\n- [x] [Support destroy player](#bulb-destroy-player)\n- [x] [Support glass background](#bulb-glass-bg)\n- [x] [Media session](#bulb-media-session) (v4.11.0)\n- [x] [Support internationalization](#bulb-internationalization) (v4.11.0)\n- [x] [Customize theme](#bulb-customize-theme) (v4.11.0)\n- [x] [Customize audio duration](#bulb-customize-audio-duration) (v4.13.0)\n- [x] [Customize player icon](#bulb-customize-player-icon) (v4.17.0)\n- [x] [Follow the theme of the system](#bulb-follow-the-theme-of-the-system) (v4.16.0)\n- [x] [Audio volume fadeIn/fadeOut](#bulb-audio-volume-fade-in-and-fade-out) (v4.20.0)\n\n## :eyes: Example\n\n> live example :\n\n- [https://lijinke666.github.io/react-music-player/](https://lijinke666.github.io/react-music-player/)\n\n> local example : [http://localhost:8081/](http://localhost:8081/)\n\n[Source Code](https://github.com/lijinke666/react-music-player/blob/master/example/example.js)\n\n## :memo: Usage\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport ReactJkMusicPlayer from 'react-jinke-music-player'\nimport 'react-jinke-music-player/assets/index.css'\n\nReactDOM.render(\n  <ReactJkMusicPlayer {...options} />,\n  document.getElementById('root'),\n)\n```\n\n## :clipboard: API\n\n| Name | Type | Default | Description |\n| ---- | ---- | ------- | ----------- |\n| className | `string` | `-` | Additional CSS class for the root DOM node |\n| audioLists | [AudioListProps[]](#bulb-audiolistprops) | `-` | [Detail](#bulb-audiolistprops) |\n| theme | `light` \\| `dark` \\| `auto` | `dark` | color of the music player theme `dark`, `light`, `auto (follow system)` | `light` |\n| locale | `zh_CN` \\| `en_US` \\| [CustomLocale](#bulb-internationalization) | `en_US` | [Detail](#bulb-internationalization) | `light` |\n| icon | [Customize player icon](#bulb-customize-player-icon) | `-` | [Customize player icon](#bulb-customize-player-icon) | `light` |\n| defaultPosition | `object` | `{top:0,left:0}` | audio controller initial position with `left,top,right,and bottom` |\n| playModeShowTime | `number` | `600` | play mode toggle show time (ms) |\n| bounds | `object`,`number` | `body` | specifies movement boundaries. Accepted values: `parent` restricts movement within the node's offsetParent (nearest node with position relative or absolute), or a selector, restricts movement within the targeted node An object with `left, top, right, and bottom` properties. These indicate how far in each direction the draggable can be moved. |\n| preload | `boolean`,`string` | `false` | Whether to load audio immediately after the page loads. can be set to `auto | metadata | none` `true | false`if`preload=true` preload=\"auto\" |\n| remember | `boolean` | `false` | The next time you access the player, do you keep the last state |\n| glassBg | `boolean` | `false` | Whether the player's background displays frosted glass effect |\n| remove | `boolean` | `true` | The Audio Can be deleted |\n| defaultPlayIndex | `number` | `0` | Default play index of the audio player |\n| playIndex | `number` | `0` | play index of the audio player |\n| defaultPlayMode | `string` | `order` | default play mode of the audio player options can be set to `order`,`orderLoop`,`singleLoop`,`shufflePlay` or omitted |\n| mode | `string` | `mini` | audio theme switch checkedText can be set to `mini`,`full` or omitted |\n| once | `boolean` | `false` | The default audioPlay handle function will be played again after each pause, If you only want to trigger it once, you can set 'true' |\n| autoPlay | `boolean` | `true` | Whether the audio is played after loading is completed. mobile devices are invalid [autoplay-policy-changes](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes) |\n| toggleMode | `boolean` | `true` | Whether you can switch between two modes, full => mini or mini => full |\n| drag | `boolean` | `true` | audio controller is can be drag of the \"mini\" mode |\n| seeked | `boolean` | `true` | Whether you can drag or click the progress bar to play in the new progress. |\n| showMiniModeCover | `boolean` | `true` | audio cover is show of the \"mini\" mode |\n| showMiniProcessBar | `boolean` | `false` | audio progress circle bar is show of the \"mini\" mode |\n| showProgressLoadBar | `boolean` | `true` | Displays the audio load progress bar. |\n| showPlay | `boolean` | `true` | play button display of the audio player panel |\n| showReload | `boolean` | `true` | reload button display of the audio player panel |\n| showDownload | `boolean` | `true` | download button display of the audio player panel |\n| showPlayMode | `boolean` | `true` | play mode toggle button display of the audio player panel |\n| showThemeSwitch | `boolean` | `true` | theme toggle switch display of the audio player panel |\n| showLyric | `boolean` | `false` | audio lyric button display of the audio player panel |\n| showMediaSession | `boolean` | `false` | [https://web.dev/media-session/](https://web.dev/media-session/) |\n| lyricClassName | `string` | `-` | audio lyric class name |\n| extendsContent | `ReactNode \\| boolean \\| string` | `-` | Extensible custom content like `<><button>button1</button> <button>button2</button></>` |\n| defaultVolume | `number` | `1` | default volume of the audio player , range `0`-`1` |\n| loadAudioErrorPlayNext | `boolean` | `true` | Whether to try playing the next audio when the current audio playback fails |\n| responsive | `boolean` | `true` | Whether to turn on the response mode, if set false, audio controller always show desktop ui |\n| onAudioDownload | `function(audioInfo)` | `-` | audio is downloaded handle |\n| onAudioPlay | `function(audioInfo)` | `-` | audio play handle |\n| onAudioPause | `function(audioInfo)` | `-` | audio pause handle |\n| onAudioSeeked | `function(audioInfo)` | `-` | When the user has moved/jumped to a new location in audio handle |\n| onAudioVolumeChange | `function(volume)` | `-` | When the volume has changed handle min = 0.0 max = 1.0 |\n| onAudioEnded | `function(currentPlayId,audioLists,audioInfo)` | `-` | The single song is ended handle |\n| onAudioAbort | `function(currentPlayId, audioLists, audioInfo)` | `-` | audio load abort The target event like {...,audioName:xx,audioSrc:xx,playMode:xx} |\n| onAudioProgress | `function(audioInfo)` | `-` | audio play progress handle |\n| onAudioError | `function(errMsg,currentPlayId, audioLists, audioInfo)` | `-` | audio load failed error handle |\n| onAudioReload | `function(audioInfo)` | `-` | audio reload handle |\n| onAudioListsChange | `function(currentPlayId,audioLists,audioInfo)` | `-` | audio lists change handle |\n| onAudioPlayTrackChange | `function(currentPlayId,audioLists,audioInfo)` | `-` | audio current play track change handle |\n| onAudioPlayModeChange | `function(playMode)` | `-` | play mode change handle |\n| onAudioListsPanelChange | `function(panelVisible)` | `-` | audio lists panel change handle |\n| onThemeChange | `function(theme)` | `-` | theme change handle |\n| onModeChange | `function(mode)` | `-` | mode change handle |\n| onAudioListsSortEnd | `function(oldIndex,newIndex)` | `-` | audio lists sort end handle, use [SortableJS](https://github.com/SortableJS/Sortable) |\n| onAudioLyricChange | `function(lineNum, currentLyric)` | `-` | audio lyric change handle |\n| getContainer | `() => HTMLElement` \\| `Selectors` | `document.body` | Return the mount node for Music player |\n| getAudioInstance | `(instance: HTMLAudioElement) => void` | `-` | get origin audio element instance , you can use it do everything |\n| autoHiddenCover | `boolean` | `false` | Auto hide the cover photo if no cover photo is available |\n| onBeforeAudioDownload | `(audioInfo: ReactJkMusicPlayerAudioInfo) => Promise<TransformedDownloadAudioInfo>` | `-` | transform download audio info before |\n| clearPriorAudioLists | `boolean` | `false` | Replace a new playlist with the first loaded playlist and reset playIndex to 0 |\n| autoPlayInitLoadPlayList | `boolean` | `false` | Play your new play list right after your new play list is loaded turn false. |\n| spaceBar | `boolean` | `false` | Play and pause audio through space bar （Desktop effective）. |\n| showDestroy | `boolean` | `false` | Destroy player button display |\n| onBeforeDestroy | `function(currentPlayId,audioLists,audioInfo)` | `-` | custom destroy handler before |\n| onDestroyed | `function(currentPlayId,audioLists,audioInfo)` | `-` | player destroyed handle |\n| customDownloader | `function(downloadInfo: TransformedDownloadAudioInfo)` | `-` | custom download handle |\n| onCoverClick | `function(mode,audioLists,audioInfo)` | `-` | audio cover clicked handle |\n| onPlayIndexChange | `function(playIndex)` | `-` | audio play index change handle |\n| quietUpdate | `boolean` | `false` | [Detail](#bulb-quiet-update) |\n| renderAudioTitle | `(audioInfo, isMobile) => ReactNode` | `-` | use `locale.audioTitle` to set `audio` tag title, the api can render custom jsx element for display |\n| mobileMediaQuery | `string` | `(max-width: 768px) and (orientation : portrait)` | custom mobile media query string, eg use the mobile version UI on iPad. <https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries> |\n| volumeFade | `{ fadeIn: number(ms), fadeOut: number(ms) }` | `-` | audio fade in and out. [Detail](#bulb-audio-volume-fade-in-and-fade-out) |\n| sortableOptions | `object` | `{swap: true, animation: 100, swapClass: 'audio-lists-panel-sortable-highlight-bg'}` | [SortableJs Options](https://github.com/SortableJS/Sortable#options) |\n| restartCurrentOnPrev | `boolean` | `false` | Restarts the current track when trying to play previous song, if the current time of the song is more than 1 second |\n\n## :bulb: Custom operation ui\n\nSupport feature:\n\n- `play`\n- `pause`\n- `reload`\n- `change play time`\n- `change playback rate`\n- `change volume`\n- `destroy audio player`\n- `toggle play`\n- `clear audio list`\n- `toggle play`\n- `play next audio`\n- `play prev audio`\n- `play audio by custom play index`\n- `update play index`\n- [SortableJS methods](https://github.com/SortableJS/Sortable#methods)\n\n```jsx\nclass App extends React.Component {\n  constructor() {\n    this.audioInstance = null\n  }\n  render() {\n    return (\n      <>\n        <ReactJkMusicPlayer\n          getAudioInstance={(instance) => {\n            this.audioInstance = instance\n          }}\n        />\n        <button onClick={() => this.audioInstance.play()}>play</button>\n        <button onClick={() => this.audioInstance.pause()}>pause</button>\n        <button onClick={() => this.audioInstance.load()}>reload</button>\n        <button onClick={() => this.audioInstance.currentTime = 40}>\n          change current play time\n        </button>\n        <button onClick={() => this.audioInstance.playbackRate = 2}>\n          change play back rate\n        </button>\n        <button onClick={() => this.audioInstance.volume = 0.2}>\n          change volume\n        </button>\n        <button onClick={() => this.audioInstance.destroy()}>\n          destroy player\n        </button>\n        <button onClick={this.audio.togglePlay}>toggle play</button>\n        <button onClick={this.audio.clear}>clear audio lists</button>\n        <button onClick={this.audio.playNext}>play next</button>\n        <button onClick={this.audio.playPrev}>play prev</button>\n        <button onClick={() => this.audio.playByIndex(1)}>play by index</button>\n        <button onClick={() => this.audio.updatePlayIndex(1)}>\n          update play index\n        </button>\n      </>\n    )\n  }\n}\n```\n\n## :bulb: Glass bg\n\n```jsx\n<ReactJkMusicPlayer glassBg />\n```\n\n<p>\n<img alt=\"glass-1\" src=\"https://github.com/lijinke666/react-music-player/blob/master/assetsImg/glass-1.png?raw=true\" width=\"200\" max-width=\"49%\">\n<img alt=\"glass-2\" src=\"https://github.com/lijinke666/react-music-player/blob/master/assetsImg/glass-2.png?raw=true\" width=\"200\" max-width=\"49%\">\n</p>\n\n## :bulb: Custom downloader\n\nDefault use [downloadjs](https://github.com/rndme/download), you can use any download library\n\neg. <https://www.npmjs.com/package/file-saver>, or use `download` attribute\n\n```jsx\nconst customDownloader = (downloadInfo) => {\n  const link = document.createElement('a')\n  link.href = downloadInfo.src // a.mp3\n  link.download = downloadInfo.filename || 'test'\n  document.body.appendChild(link)\n  link.click()\n}\n\n;<ReactJkMusicPlayer\n  audioLists={[{ src: 'a.mp3' }]}\n  customDownloader={customDownloader}\n/>\n\n// use onBeforeAudioDownload\nconst onBeforeAudioDownload = () => {\n  return Promise.resolve({\n    src: '1.mp3',\n  })\n}\n\nconst customDownloader = (downloadInfo) => {\n  console.log(downloadInfo.src) // 1.mp3\n}\n\n;<ReactJkMusicPlayer\n  customDownloader={customDownloader}\n  onBeforeAudioDownload={onBeforeAudioDownload}\n/>\n```\n\n## :bulb: Destroy player\n\n```jsx\nconst onBeforeDestroy = (currentPlayId, audioLists, audioInfo) => {\n  return new Promise((resolve, reject) => {\n    // your custom validate\n    if (window.confirm('Are you confirm destroy the player?')) {\n      // if resolve, player destroyed\n      resolve()\n    } else {\n      // if reject, skip.\n      reject()\n    }\n  })\n}\n\nconst onDestroyed = (currentPlayId, audioLists, audioInfo) => {\n  console.log('onDestroyed:', currentPlayId, audioLists, audioInfo)\n}\n\n;<ReactJkMusicPlayer\n  showDestroy\n  onBeforeDestroy={onBeforeDestroy}\n  onDestroyed={onDestroyed}\n/>\n```\n\n## :bulb: Media session\n\n> <https://web.dev/media-session/>\n\n```jsx\n// so cool, so easy !!!\n<ReactJkMusicPlayer showMediaSession />\n```\n\n<img src=\"https://github.com/lijinke666/react-music-player/blob/master/assetsImg/media-session-destop.png\" max-width=\"100%\"/>\n<img src=\"https://github.com/lijinke666/react-music-player/blob/master/assetsImg/media-session-mobile.jpeg\" width=\"400\" max-width=\"100%\"/>\n\n## :bulb: Internationalization\n\n> Version: 4.11.0\n\n[Source](https://github.com/lijinke666/react-music-player/blob/master/src/locale/index.js)\n\n```jsx\nimport Locale from 'react-jinke-music-player/lib/config/locale'\n// Two languages are provided by default\n// one of zh_CN | en_US\n<ReactJkMusicPlayer locale={Locale.zh_CN}/>\n// <ReactJkMusicPlayer locale={'en_US'}/>\n\n// Custom override\nconst customLocale = {\n  playModeText: {\n    order: '',\n    orderLoop: '',\n    singleLoop: '',\n    shufflePlay: ''\n  },\n  openText: '',\n  closeText: '',\n  emptyText: '',\n  clickToPlayText: '',\n  clickToPauseText: '',\n  nextTrackText: '',\n  previousTrackText: '',\n  reloadText: '',\n  volumeText: '',\n  playListsText: '',\n  toggleLyricText: '',\n  toggleMiniModeText: '',\n  destroyText: '',\n  downloadText: '',\n  lightThemeText: '',\n  darkThemeText: '',\n  switchThemeText: '',\n  removeAudioListsText: '',\n  controllerTitle: '',\n  emptyLyricText: '',\n  clickToDeleteText: (name) => ``,\n  audioTitle: ''\n  // audioTitle: (audioInfo) => ``\n}\n\n<ReactJkMusicPlayer locale={customLocale}/>\n\n// Support partial override, auto merge\n\n<ReactJkMusicPlayer locale={{ audioTitle: \"xxx\" }}/>\n```\n\n## :bulb: Customize Theme\n\n```jsx\nimport ReactJkMusicPlayer from 'react-jinke-music-player'\nimport 'react-jinke-music-player/lib/styles/index.less'\n```\n\n```less\n@primary-color: #31c27c;\n@default-color: #d9d9d9;\n@bg-color: #f7f8fa;\n@border-color: #d9d9d9;\n@panel-bg-light: #fff;\n@controller-bg-light: #fff;\n@music-player-panel-height: 80px;\n@lists-panel-width: 480px;\n@lists-panel-height: 410px;\n@lists-panel-item-bg: #40444b;\n@lists-panel-item-bg-light: #fff;\n@panel-header-height: 50px;\n@panel-bg: rgba(0, 0, 0, 0.7);\n@font-color: #444;\n@player-width: 80px;\n@player-height: @player-width;\n@base-color: rgba(255, 255, 255, 0.6);\n@common-animate-type: cubic-bezier(0.43, -0.1, 0.16, 1.1);\n@common-animate-time: 350ms @common-animate-type;\n@progress-load-bar-bg-color: rgba(0, 0, 0, 0.11);\n@progress-load-bar-bg-color-light: rgba(0, 0, 0, 0.06);\n@progress-bar-bg-color-light: rgba(0, 0, 0, 0.09);\n@progress-bar-bg-color-dark: #fff;\n@player-lyric-color: @primary-color;\n@player-lyric-font-size: 36px;\n@player-lyric-font-size-mobile: 16px;\n@player-lyric-z-index: 999;\n```\n\n> Customize in webpack\n\n```diff\n// webpack.config.js\n\nmodule.exports = {\n  rules: [{\n    test: /\\.less$/,\n    use: [\n      ...\n      {\n      loader: 'less-loader',\n+     options: {\n+       modifyVars: {\n+         'primary-color': '#444',\n+         // or\n+         'hack': `true; @import \"your-less-file-path.less\";`, // Override with less file\n+       },\n+       javascriptEnabled: true,\n+     },\n    }],\n  }],\n}\n```\n\n> Customize in less file\n\n```less\n@import 'react-jinke-music-player/lib/styles/index.less';\n@import 'your-theme-file.less';\n```\n\n## :bulb: Customize audio duration\n\n> Default: by this.audio.duration, if cannot get current play audio's duration, you can customize to set.\n\n```jsx\n<ReactJkMusicPlayer audioLists={[{\n  ...\n  duration: 100.00\n}]} />\n\n```\n\n## :bulb: Customize player icon\n\n```ts\nexport interface ReactJkMusicPlayerIcon {\n  pause?: React.ReactNode | string\n  play?: React.ReactNode | string\n  destroy?: React.ReactNode | string\n  close?: React.ReactNode | string\n  delete?: React.ReactNode | string\n  download?: React.ReactNode | string\n  toggle?: React.ReactNode | string\n  lyric?: React.ReactNode | string\n  volume?: React.ReactNode | string\n  mute?: React.ReactNode | string\n  next?: React.ReactNode | string\n  prev?: React.ReactNode | string\n  playLists?: React.ReactNode | string\n  reload?: React.ReactNode | string\n  loop?: React.ReactNode | string\n  order?: React.ReactNode | string\n  orderLoop?: React.ReactNode | string\n  shuffle?: React.ReactNode | string\n  loading?: React.ReactNode | string\n}\n```\n\n## :bulb: Follow the theme of the system\n\n```jsx\n<ReactJkMusicPlayer theme=\"auto\" />\n```\n\n![auto-theme](https://github.com/lijinke666/react-music-player/blob/master/assetsImg/auto-theme.gif?raw=true)\n\n## :bulb: Quiet update\n\n```jsx\n/**\n * Don't interrupt current playing state when audio list updated\n * eg. (A) is current playing...\n * [A,B] => [A,C,B]\n * [A,B] => [A,B,C]\n *\n * if (A) not in updated audio lists\n * [A,B] => [C]\n * (C) is playing\n */\n\nfunction App() {\n  const [audioLists, setAudioLists] = useState([\n    { musicSrc: 'A' },\n    { musicSrc: 'B' },\n  ])\n\n  useEffect(() => {\n    setTimeout(() => {\n      setAudioLists([{ musicSrc: 'A' }, { musicSrc: 'C' }, { musicSrc: 'B' }])\n    }, 1000)\n  }, [setAudioLists])\n\n  return (\n    <ReactJkMusicPlayer\n      quietUpdate\n      clearPriorAudioLists\n      audioLists={audioLists}\n    />\n  )\n}\n```\n\n## :bulb: Import in browser\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/react-jinke-music-player@4.18.1/assets/index.css\"\n    />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n  <script src=\"https://unpkg.com/react@16.13.1/umd/react.production.min.js\"></script>\n  <script src=\"https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js\"></script>\n  <script src=\"https://unpkg.com/react-jinke-music-player@4.18.1/dist/react-jinke-music-player.min.js\"></script>\n  <script>\n    ReactDOM.render(\n      React.createElement(ReactJkMusicPlayer),\n      document.getElementById('root'),\n    )\n  </script>\n</html>\n```\n\n## :bulb: Server-Side Rendering\n\n```jsx\n// components/Player.js\nimport React from 'react'\nimport ReactJkMusicPlayer from 'react-jinke-music-player'\nimport styles from 'react-jinke-music-player/assets/index.module.css'\n\nexport const Player = () => <ReactJkMusicPlayer />\n\n// pages/_app.js\nimport dynamic from 'next/dynamic'\nconst PlayerWithNoSSR = dynamic(() => import('../components/Player'), {\n  ssr: false,\n})\n```\n\n## :bulb: Customize mobile media query\n\n> eg. Use mobile UI on a iPad device\n\n```jsx\n// Default '(max-width: 768px) and (orientation : portrait)'\n<ReactJkMusicPlayer mobileMediaQuery=\"(max-width: 1024px)\" />\n```\n\n## :bulb: Audio volume fade in and fade out\n\n```jsx\n<ReactJkMusicPlayer volumeFade={{ fadeIn: 500, fadeOut: 500 }} />\n```\n\n## :pencil: Development\n\n```bash\ngit clone https://github.com/lijinke666/react-music-player.git\nyarn # npm install\nyarn start # npm start\nopen `http://localhost:8084/`\n```\n\n## :hourglass: Test case\n\n```bash\nnpm run test\n```\n\n## :bulb: AudioListProps\n\n> Like This\n\n```ts\ninterface ReactJkMusicPlayerAudioListProps {\n  name: string | React.ReactNode,\n  musicSrc: string | () => Promise<string>,\n  cover: string,\n  singer?: string | React.ReactNode,\n  duration?: number,\n  lyric?: string,\n  [key: string]: any\n}>\n```\n\n## :bulb: AudioInfo\n\n> Like This\n\n```ts\ninterface ReactJkMusicPlayerAudioInfo {\n  cover: string\n  currentTime: number\n  duration: number\n  ended: boolean\n  musicSrc: string\n  muted: boolean\n  name: string\n  networkState: number\n  paused: boolean\n  played: any\n  readyState: number\n  startDate: any\n  volume: number\n  lyric: string\n  [key: string]: any\n}\n```\n\n## :two_men_holding_hands: Contributors\n\n> Special thanks: @JeffreyCA\n\n![https://github.com/lijinke666/react-music-player/graphs/contributors](https://contrib.rocks/image?repo=lijinke666/react-music-player)\n\n## :page_facing_up: License\n\n[MIT](https://github.com/lijinke666/react-music-player/blob/master/LICENCE)\n"
  },
  "artifacts": [],
  "remote": {
    "type": "copy",
    "registry": "npm",
    "hash": "b71e04b1-fbf4-4c30-a76e-11149285f7a4-1694958891601",
    "reference": "D:\\PythonLib\\github\\azusa-player\\Dependencies\\react-jinke-music-player"
  },
  "registry": "npm",
  "hash": "b71e04b1-fbf4-4c30-a76e-11149285f7a4-1694958891601"
}
